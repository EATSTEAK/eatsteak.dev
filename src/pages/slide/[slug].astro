---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import { renderMarpSlides, extractSlideContent } from "@/utils/marp";
import { Button } from "@/components/ui/Button";
import { FormattedDate } from "@/components/post/FormattedDate";
import { Topics } from "@/components/ui/Topics";
import { CategoryLabel } from "@/components/ui/CategoryLabel";
import { TableOfContents } from "@/components/post/TableOfContents";
import type { MarkdownHeading } from "astro";
import type { TocHeading } from "@/types";
import type { ImageMetadata } from "astro";
import "@/styles/prose.css";
import "@/styles/slide.css";

// Import all images from src/assets using Vite's glob import
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/**/*.{jpeg,jpg,png,gif,webp}",
  { eager: true },
);

export async function getStaticPaths() {
  const slides = await getCollection("slide");
  return slides.map((slide) => ({
    params: { slug: slide.slug },
    props: { slide },
  }));
}

type Props = {
  slide: CollectionEntry<"slide">;
};

const { slide } = Astro.props;

// Get the raw markdown content
const rawContent = slide.body;
const slideContent = extractSlideContent(rawContent);

// Create image path mapping for Vite assets
const imageMapping: Record<string, string> = {};
for (const [path, module] of Object.entries(images)) {
  // Extract filename from the import path
  const filename = path.split("/").pop();
  if (filename) {
    imageMapping[filename] = module.default.src;
  }
}

const marpResult = renderMarpSlides(slideContent, imageMapping);

// Add anchor IDs to slide sections for ToC navigation
let processedHtml = marpResult.html;
let slideIndex = 0;
processedHtml = processedHtml.replace(
  /<section([^>]*)>/g,
  (match, attributes) => {
    const slideId = `slide-${slideIndex}`;
    slideIndex++;
    return `<section id="${slideId}"${attributes}>`;
  },
);

// Build ToC from slide headings with proper anchor links
function extractHeadingsFromSlides(slides: any[]): MarkdownHeading[] {
  const headings: MarkdownHeading[] = [];

  slides.forEach((slideItem, slideIndex) => {
    const htmlContent = slideItem.html;
    const headingRegex = /<h([1-6])[^>]*>(.*?)<\/h[1-6]>/gi;
    let match;
    let hasHeading = false;

    // Check if this slide has any headings
    while ((match = headingRegex.exec(htmlContent)) !== null) {
      const depth = parseInt(match[1]);
      const text = match[2].replace(/<[^>]*>/g, "").trim();
      if (text) {
        headings.push({
          depth: Math.max(1, depth - 1), // Adjust depth for ToC hierarchy
          slug: `slide-${slideIndex}`, // Link directly to slide
          text,
        });
        hasHeading = true;
        break; // Only use the first heading per slide for ToC
      }
    }
  });

  return headings;
}

function buildToc(headings: MarkdownHeading[]): TocHeading[] {
  const toc: TocHeading[] = [];
  const parentHeadings = new Map();

  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    if (heading.depth <= 2) {
      toc.push(heading);
    } else {
      const parent = parentHeadings.get(heading.depth - 1);
      if (parent) {
        parent.subheadings.push(heading);
      }
    }
  });

  return toc;
}

const headings = extractHeadingsFromSlides(marpResult.slides);
const toc = buildToc(headings);
---

<Layout title={slide.data.title} description={slide.data.description}>
  <style set:html={marpResult.css}></style>

  <!-- Enhanced Document View with Frontmatter and ToC -->
  <div class="fixed top-5 right-5 z-10">
    <Button href={`/slide/${slide.slug}/show`} class="slideshow-btn">
      üéûÔ∏è Slideshow
    </Button>
  </div>

  <main class="flex flex-col w-full">
    <section
      class="self-center flex justify-center items-stretch w-full p-8 xl:p-0"
    >
      <article
        class="self-center w-full lg:max-xl:max-w-(--breakpoint-sm) max-w-(--breakpoint-md) pb-16"
      >
        <!-- Frontmatter Section -->
        <section class="prose mb-8">
          <div class="title mb-8">
            <h1>{slide.data.title}</h1>
            <div class="flex items-center flex-wrap line-between-flex-items">
              <div class="after:text-gray-500">
                <CategoryLabel
                  category={slide.data.category ?? "uncategorized"}
                />
              </div>
              <div class="date text-gray-500">
                <FormattedDate
                  dateTime={slide.data.pubDate}
                  client:only="solid-js"
                />
                {
                  slide.data.updatedDate && (
                    <span>
                      &nbsp;Í≤åÏãú,
                      <FormattedDate
                        dateTime={slide.data.updatedDate}
                        client:only="solid-js"
                      />
                      &nbsp;ÏàòÏ†ï
                    </span>
                  )
                }
              </div>
            </div>
            {
              slide.data.topics && (
                <div class="topic mt-2 mb-8">
                  <Topics topics={slide.data.topics} />
                </div>
              )
            }
          </div>
        </section>

        <!-- Slide Content -->
        <section class="slide-document prose" set:html={processedHtml} />
      </article>

      <!-- Table of Contents Sidebar -->
      {
        toc.length > 0 && (
          <aside class="hidden self-stretch lg:block pt-[4rem] max-w-xs lg:w-80">
            <div class="py-8 pl-4 sticky top-0">
              <TableOfContents tocHeadings={toc} client:only="solid-js" />
            </div>
          </aside>
        )
      }
    </section>
  </main>
</Layout>
