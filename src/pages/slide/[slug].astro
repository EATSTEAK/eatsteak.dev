---
import { getCollection, type CollectionEntry } from "astro:content";
import { renderMarpSlides, extractSlideContent } from "@/utils/marp";
import type { MarkdownHeading } from "astro";
import type { ImageMetadata } from "astro";
import "@/styles/prose.css";
import "@/styles/slide.css";
import BlogSlide from "@/layouts/BlogSlide.astro";
import { getReadingTime } from "@/utils/reading-time";
import { JSDOM } from "jsdom";

// Import all images from src/assets using Vite's glob import
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/**/*.{jpeg,jpg,png,gif,webp}",
  { eager: true },
);

export async function getStaticPaths() {
  const slides = await getCollection("slide");
  return slides.map((slide) => ({
    params: { slug: slide.slug },
    props: { slide },
  }));
}

type Props = {
  slide: CollectionEntry<"slide">;
};

const { slide } = Astro.props;

// Get the raw markdown content
const rawContent = slide.body;
const slideContent = extractSlideContent(rawContent);

// Create image path mapping for Vite assets
const imageMapping: Record<string, string> = {};
for (const [path, module] of Object.entries(images)) {
  // Extract filename from the import path
  const filename = path.split("/").pop();
  if (filename) {
    imageMapping[filename] = module.default.src;
  }
}

const minutesRead = getReadingTime(slideContent);

const marpResult = renderMarpSlides(slideContent, imageMapping);

// Add anchor IDs to slide sections for ToC navigation
let processedHtml = marpResult.html;
let slideIndex = 0;
processedHtml = processedHtml.replace(/<section([^>]*)>/g, (_, attributes) => {
  const slideId = `slide-${slideIndex}`;
  slideIndex++;
  return `<section id="${slideId}"${attributes}>`;
});

// Build ToC from slide headings with proper anchor links
function extractHeadingsFromSlides(slides: any[]): MarkdownHeading[] {
  const headings: MarkdownHeading[] = [];

  slides.forEach((slideItem, slideIndex) => {
    const htmlContent = slideItem.html;

    // Use JSDOM to parse HTML content
    const dom = new JSDOM(htmlContent);
    const document = dom.window.document;

    // Find all heading elements (h1-h6)
    const headingElements = document.querySelectorAll("h1, h2, h3, h4, h5, h6");

    if (headingElements.length > 0) {
      // Only use the first heading per slide for ToC
      const firstHeading = headingElements[0];
      const depth = parseInt(firstHeading.tagName.charAt(1)); // Extract number from h1, h2, etc.
      const text = firstHeading.textContent?.trim() || "";
      const id = firstHeading.id || `slide-${slideIndex}`; // Use heading id or fallback to slide index

      if (text) {
        headings.push({
          depth, // Adjust depth for ToC hierarchy
          slug: id, // Use the heading's id attribute
          text,
        });
      }
    }
  });

  return headings;
}

const headings = extractHeadingsFromSlides(marpResult.slides);
---

<BlogSlide slug={slide.slug} {...slide.data} {minutesRead} {headings}>
  <style set:html={marpResult.css}></style>
  <section class="slide-document prose" set:html={processedHtml} />
</BlogSlide>
