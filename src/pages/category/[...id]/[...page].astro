---
import type { InferGetStaticPropsType, GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { SITE_TITLE, SITE_DESCRIPTION, CATEGORIES } from "../../../consts";
import Layout from "@/layouts/Layout.astro";
import PostItem from "@/components/post/PostItem.astro";
import { GrillContainer } from "@/components/shell/GrillContainer";
import { Container } from "@/components/shell/Container";
import type { JSX } from "solid-js";
import { Pagination } from "@/components/ui/Pagination";
import { getReadingTime } from "@/utils/reading-time";

export const getStaticPaths = (async ({ paginate }) => {
  const allPosts = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
  );

  return Object.values(CATEGORIES).flatMap((category) => {
    const filteredPosts = allPosts
      .filter((post) => post.data.hidden !== true)
      .filter(
        (post) =>
          (CATEGORIES[post.data.category ?? "uncategorized"]?.id ??
            "uncategorized") === category.id,
      );
    return paginate(filteredPosts, {
      params: { id: category.id },
      props: { category: category },
      pageSize: 10,
    });
  });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page, category } = Astro.props as Props;
---

<Layout title={SITE_TITLE} description={SITE_DESCRIPTION}>
  <main class="flex flex-col items-stretch justify-start">
    <GrillContainer parentClass="relative h-fit">
      <h2
        class="px-2 uppercase"
        style={{
          "background-color": `var(--category-${category.id}-bg)`,
          color: `var(--category-${category.id}-text)`,
        }}
      >
        {category.name}
      </h2>
      <p
        class="px-2"
        style={{
          "background-color": `var(--category-${category.id}-bg)`,
          color: `var(--category-${category.id}-text)`,
        }}
      >
        {category.description}
      </p>
    </GrillContainer>
    <Container>
      <div class="flex flex-col gap-2">
        {
          page.data.map(
            (post): JSX.Element => (
              <>
                <PostItem post={post} minutesRead={getReadingTime(post.body)} />
              </>
            ),
          )
        }
        {
          page.data.length === 0 && (
            <p class="mx-auto my-8">읽을 수 있는 글이 없습니다.</p>
          )
        }
      </div>
      <Pagination
        baseUrl={`/category/${category.id}`}
        lastPage={page.lastPage}
        currentPage={page.currentPage}
      />
    </Container>
  </main>
</Layout>
