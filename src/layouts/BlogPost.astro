---
import {getCollection, type CollectionEntry} from "astro:content";
import {Image} from "astro:assets";
import Layout from "./Layout.astro";
import {Profile} from "@components/ui/Profile";
import {FormattedDate} from "@components/post/FormattedDate";
import {Topics} from "@components/ui/Topics";
import {CategoryLabel} from "@components/ui/CategoryLabel";
import "@styles/prose.css";
import {Counter} from "@components/post/Counter";
import {Comments} from "@components/post/Comments";
import {CATEGORIES} from "../consts";
import PostItem from "@components/post/PostItem.astro";
import {getReadingTime} from "@utils/reading-time";
import {MinutesRead} from "@components/post/MinutesRead";
import type {MarkdownHeading} from "astro";
import {TableOfContents} from "@components/post/TableOfContents";
import Series from "@components/post/Series.astro";

type Props = CollectionEntry<"blog">["data"] & {
    slug: string;
    minutesRead: number | undefined;
    headings: MarkdownHeading[];
};

const {
    slug,
    title,
    description,
    pubDate,
    updatedDate,
    thumbnail,
    category,
    topics,
    minutesRead,
    headings,
    series,
} = Astro.props;

const allPosts = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

const recentPostsInCategory = allPosts
    .filter((post) => post.data.hidden !== true && post.slug !== slug)
    .filter(
        (post) =>
            (CATEGORIES[post.data.category ?? "uncategorized"]?.id ??
                "uncategorized") === (category ?? "uncategorized"),
    )
    .slice(0, 3);

function buildToc(headings: MarkdownHeading[]): TocHeading[] {
    const toc: TocHeading[] = [];
    const parentHeadings = new Map();
    headings.forEach((h) => {
        const heading = {...h, subheadings: []};
        parentHeadings.set(heading.depth, heading);
        if (heading.depth === 2) {
            toc.push(heading);
        } else {
            parentHeadings.get(heading.depth - 1).subheadings.push(heading);
        }
    });
    return toc;
}
const toc = buildToc(headings);
---

<Layout
        title={`${title} - EATSTEAK.DEV`}
        description={description}
        image={`/card/og/${slug}.png`}
>
    <main class="flex flex-col w-full">
        <section
                class="self-center flex justify-center items-stretch w-full p-8 xl:p-0"
        >
            <article class="self-center w-full max-w-screen-md pb-16">
                <section class="mb-4 image min-h-[20rem] w-full bg-cover bg-no-repeat bg-center" style={{ ...(thumbnail && { backgroundImage: `url("${thumbnail.src}")` }) }}>

                </section>
                <section class="prose">
                    <div class="title mb-8">
                        <CategoryLabel category={category ?? "uncategorized"}/>
                        <h1>{title}</h1>
                        <div class="flex flex-wrap line-between-flex-items">
                            <div class="date text-gray-500">
                                <FormattedDate dateTime={pubDate} client:only="solid-js"/>
                                {
                                    updatedDate && (
                                                <span>
                      &nbsp;게시,
                                                    <FormattedDate
                                                            dateTime={updatedDate}
                                                            client:only="solid-js"
                                                    />
                                                    &nbsp;수정
                    </span>
                                    )
                                }
                            </div>
                            {minutesRead &&
                                    <MinutesRead minutesRead={minutesRead}/>}
                            <Counter path={Astro.url.pathname} client:only="solid-js"/>
                        </div>
                        {
                            topics && (
                                        <div class="topics mt-2 mb-8">
                                            <Topics topics={topics}/>
                                        </div>
                            )
                        }
                    </div>
                    <div class="content">
                        <slot/>
                    </div>
                </section>
                <hr class="my-8"/>
                {series &&
                        <Series posts={allPosts} series={series} selectedSlug={slug}/>}
                <Comments client:only="solid-js"/>
            </article>
            <section class="hidden self-stretch lg:block pt-[20rem] max-w-xs">
                <div class="py-8 pl-8 sticky top-0">
                    <TableOfContents tocHeadings={toc} client:only="solid-js"/>
                </div>
            </section>
        </section>
        <section
                class="py-16 flex flex-col items-center bg-slate-50 dark:bg-slate-900 transition-colors"
        >
            <div class="flex flex-col gap-8 w-full max-w-screen-lg p-8 xl:p-0">
                <div class="w-full">
                    <Profile/>
                </div>
                <div class="w-full">
                    <h3>같은 분류의 최신 글</h3>
                    <div class="mt-4 flex flex-col gap-2">
                        {
                            recentPostsInCategory.map((post) => (
                                    <PostItem
                                            post={post}
                                            minutesRead={getReadingTime(post.body)}
                                    />
                            ))
                        }
                        {
                            recentPostsInCategory.length === 0 && (
                                        <p class="mx-auto my-8">읽을 수 있는 글이 없습니다.</p>
                            )
                        }
                    </div>
                </div>
            </div>
        </section>
    </main>
</Layout>
