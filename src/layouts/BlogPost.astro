---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "./Layout.astro";
import { Profile } from "../components/Profile";
import { FormattedDate } from "../components/FormattedDate";
import { Topics } from "../components/Topics";
import { CategoryLabel } from "../components/CategoryLabel";
import "../styles/prose.css";
import { Counter } from "../components/Counter";
import { CATEGORIES } from "../consts";
import { PostItem } from "../components/PostItem";
import { getReadingTime } from "../utils/reading-time";
import { MinutesRead } from "../components/MinutesRead";
import type { MarkdownHeading } from "astro";
import { TocHeading } from "../components/TocHeading";

type Props = CollectionEntry<"blog">["data"] & {
  slug: string;
  minutesRead: number | undefined;
  headings: MarkdownHeading[];
};

const {
  slug,
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  category,
  topics,
  minutesRead,
  headings,
} = Astro.props;

const allPosts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

const recentPostsInCategory = allPosts
  .filter((post) => post.data.hidden !== true && post.slug !== slug)
  .filter(
    (post) =>
      (CATEGORIES[post.data.category ?? "uncategorized"]?.id ??
        "uncategorized") === (category ?? "uncategorized"),
  )
  .slice(0, 3);

function buildToc(headings: MarkdownHeading[]): TocHeading[] {
  const toc: TocHeading[] = [];
  const parentHeadings = new Map();
  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}
const toc = buildToc(headings);
---

<Layout title={`${title} - EATSTEAK.DEV`} description={description}>
  <main class="flex flex-col w-full">
    <section
      class="self-center flex justify-center items-stretch w-full p-8 xl:p-0"
    >
      <article class="self-center w-full max-w-screen-md pb-16">
        <section class="mb-2 image min-h-[16rem]">
          {heroImage && <img class="max-w-100%" src={heroImage} alt="" />}
        </section>
        <section class="prose">
          <div class="title mb-8">
            <CategoryLabel category={category ?? "uncategorized"} />
            <h1>{title}</h1>
            <div class="flex flex-wrap line-between-flex-items">
              <div class="date text-gray-500">
                <FormattedDate dateTime={pubDate} client:only="solid-js" />
              </div>
              {
                updatedDate && (
                  <div class="last-updated-on text-gray-500">
                    |
                    <FormattedDate
                      dateTime={updatedDate}
                      client:only="solid-js"
                    />{" "}
                    수정
                  </div>
                )
              }
              {minutesRead && <MinutesRead minutesRead={minutesRead} />}
              <Counter path={Astro.url.pathname} client:only="solid-js" />
            </div>
            {
              topics && (
                <div class="topics mt-2 mb-8">
                  <Topics topics={topics} />
                </div>
              )
            }
          </div>
          <div class="content">
            <slot />
          </div>
        </section>
      </article>
      <section class="hidden self-stretch lg:block pt-[16rem] max-w-xs">
        <nav class="py-8 pl-8 sticky top-0">
          <hr />
          <TocHeading tocHeadings={toc} />
        </nav>
      </section>
    </section>
    <section
      class="py-16 flex flex-col items-center bg-slate-50 dark:bg-slate-900 transition-colors"
    >
      <div class="flex flex-col gap-8 w-full max-w-screen-lg p-8 xl:p-0">
        <div class="w-full px-1">
          <Profile />
        </div>
        <div class="w-full">
          <h3>같은 분류의 최신 글</h3>
          <div class="mt-4 flex flex-col gap-2">
            {
              recentPostsInCategory.map((post) => (
                <PostItem
                  post={post}
                  minutesRead={getReadingTime(post.body)}
                  client:only="solid-js"
                />
              ))
            }
            {
              recentPostsInCategory.length === 0 && (
                <p class="mx-auto my-8">읽을 수 있는 글이 없습니다.</p>
              )
            }
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>
